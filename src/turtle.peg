statements = statement*

statement =
	_ expr:expression _
    	{ return expr; }

expression
    = expr:comparative
        { return expr; }

comp_op = "<=" / ">=" / "!=" / "==" / "<" / ">"

comparative
    = left:additive _ op:comp_op _ right:comparative
        { return {tag: op, left:left, right:right}; }
    / additive

additive_op = "+" / "-"

additive
    = left:multiplicative _ op:additive_op _ right:additive
        { return {tag:op, left:left, right:right}; }
    / multiplicative

mult_op = "*" / "/"

multiplicative
    = left:primary _ op:mult_op _ right:multiplicative
        { return {tag:op, left:left, right:right}; }
    / primary

primary
    = number
    / "repeat" "(" _ expr:expression _ ")" _ "{" body:statements "}"
        { return {tag:"repeat", count: expr, body: body }; }
    / v:identifier "(" _ ")" _ ";"
        { return {tag:"call", name:v, args:[]}; }
    / v:identifier "(" _ args:arglist _ ")" _ ";"
        { return {tag:"call", name:v, args:args}; }
    / "(" _ expr:expression _ ")"
        { return expr; }

comma_expression = "," _ expr:expression
        { return expr; }

arglist
    = first:expression rest:comma_expression*
        { return [first].concat(rest); }
number
    = neg:"-"? chars:[0-9]+ dec:number_dec?
			{
				var n = parseFloat(chars.join('') + dec);
				if (neg) return n * -1;
				else return n;
			}

number_dec
    = "." chars:[0-9]*
        { return "." + chars.join(''); }

validfirstchar
    = [a-zA-Z_]

validchar
    = [0-9a-zA-Z_]

identifier
    = firstchar:validfirstchar chars:validchar*
        { return firstchar + chars.join(''); }

_ = [ \t\n]*
__ = [ \t\n]+
